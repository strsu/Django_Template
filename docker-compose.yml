version: '3.3'
# name: django_local
services:
  backend:
    build:
      context: ./backend
    depends_on:
      - postgres
    volumes:
      - ./backend:/opt
    command: /opt/scripts/start.sh
    env_file: .env
    ports:
      - "3030:3000"
    extra_hosts:
      - "host.docker.internal:host-gateway"

  nginx:
    build:
      context: ./nginx
    depends_on:
      - backend
    volumes:
      - ./backend/media/:/media/
      - ./backend/staticfiles/:/staticfiles/
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/error-page.conf:/etc/nginx/snippets/error-page.conf:ro
      - ./nginx/log:/var/log/nginx/
      - ./nginx/ssl:/usr/share/nginx/ssl/
      - ./nginx/html:/usr/share/nginx/html/
      - ./nginx/react:/usr/share/nginx/react/
      - ./nginx/listing:/usr/share/nginx/listing/
      #- F:\:/usr/share/nginx/listing/media/
    ports:
      - "80:80"
      - "443:443"

  postgres:
    image: postgres:13
    volumes:
      - ./.pgdata:/var/lib/postgresql/data
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical" # 이렇게 해야 kafka connect에서 jdbc connect를 사용할 수 있다
    env_file: .env
    ports:
      - "54320:5432"

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./promtail:/mnt/config
      - ./backend/log:/var/log
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: -config.file=/mnt/config/promtail-config.yml

# docker-compose -f docker-compose.yml -p <<원하는 이름>> up